"""
1. Подсчитать, сколько было выделено памяти под переменные в ранее
разработанных программах в рамках первых трех уроков. Проанализировать
результат и определить программы с наиболее эффективным использованием памяти.

Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько
вариантов кода для одной и той же задачи. Результаты анализа вставьте в виде
комментариев к коду. Также укажите в комментариях версию Python и разрядность 
вашей ОС.

Windows 10
Python 3.9
"""

import sys


"""
1.1. Найти сумму и произведение цифр трехзначного числа, которое вводит пользователь.
"""

num = int(input('Введите целое трехзначное число: '))
a = num // 100
b = (num % 100) // 10
c = num % 10
answer_product = a * b * c
answer_sum = a + b + c
print(f'Для числа {num} произведение цифр = {answer_product}\nсумма цифр = {answer_sum}')

sum_member_first = sys.getsizeof(num) + sys.getsizeof(a) + sys.getsizeof(b) + sys.getsizeof(c) + sys.getsizeof(
    answer_product) + sys.getsizeof(answer_sum)

print('В программе задействовано байт памяти: {}'.format(sum_member_first))

# В программе задействовано байт памяти: 98


"""
2.3. Сформировать из введенного числа обратное по порядку входящих в него цифр и вывести на экран. 
Например, если введено число 3486, то надо вывести число 6843.
"""

number = input('Введите число: ')
inverted_value = number[::-1]
print(f'Чило {number} в обратном порядке: {inverted_value}')

sum_member_second = sys.getsizeof(number) + sys.getsizeof(inverted_value)

print('В программе задействовано байт памяти: {}'.format(sum_member_second))

# В программе задействовано байт памяти: 131


"""
3.2. Во втором массиве сохранить индексы четных элементов первого массива. 
Например, если дан массив со значениями 8, 3, 15, 6, 4, 2, 
то во второй массив надо заполнить значениями 1, 4, 5, 6 (или 0, 3, 4, 5 - если индексация начинается с нуля), 
т.к. именно в этих позициях первого массива стоят четные числа.
"""


import random

r = [random.randint(0, 99) for _ in range(10)]
print(f'Первый массив {r}')
index_even = []

for n in r:
    if n % 2 == 0:
        index_even.append(r.index(n))

print(f'Индексы чётных элементов первого массива: {index_even}')

sum_member_third = sys.getsizeof(r) + sys.getsizeof(index_even)

print('В программе задействовано байт памяти: {}'.format(sum_member_third))

# В программе задействовано байт памяти: 372

"""
1 - использует меньше всего памяти.
2 и 3 - количество использованной памяти сильно зависит от количества элементов.
"""
